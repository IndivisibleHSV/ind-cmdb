IMAGE_NAME := ind-cmdb
DOCKER_REPO_NAME := indivisiblehsv/$(IMAGE_NAME)

GIT_BRANCH_NAME := $(shell git rev-parse --abbrev-ref HEAD | sed "sX/X-Xg")
GIT_TAG_NAME := $(shell git describe --always HEAD)

TAGS := $(GIT_BRANCH_NAME) $(GIT_TAG_NAME)

ifeq ($(GIT_BRANCH_NAME),master)
  TAGS += latest
endif

TAGS := $(foreach t,$(TAGS),$(DOCKER_REPO_NAME):$(t))

#
# default build target
#
all: build
.PHONY: all

#
# docker tag the build
#
tag: build
	@echo $(TAGS) | xargs -n 1 docker tag $(DOCKER_REPO_NAME)
.PHONY: tag

#
# docker push the tags to the respoke registry
#
push: tag
	@echo $(TAGS) | xargs -n 1 docker push
.PHONY: push

#
# docker pull latest dependencies.
#
pull:
	docker pull $(shell sed -n 's/^FROM // p' Dockerfile)
	-docker pull $(DOCKER_REPO_NAME):latest || \
		docker pull $(DOCKER_REPO_NAME)
.PHONY: pull

#
# docker build the image
#
build:
	docker build -t $(DOCKER_REPO_NAME) .
	docker-compose build
.PHONY: build

#
# give mysql some time to get up and running
#
mysql:
	while ! docker-compose run --rm mysql_check; do sleep 1; done
.PHONY: mysql

#
# run unit tests
#
test: build mysql
	docker-compose run --rm $(IMAGE_NAME) npm --silent test
.PHONY: test

#
# run unit tests, with output for CI
#
ci-test: build mysql
	rm -rf build/test
	install -d -m 777 build/test
	docker-compose run --rm $(IMAGE_NAME) npm --silent run ci-test
.PHONY: ci-test

#
# git tag and git push
#
release:
	@OLD=$(shell node -pe "require('./package.json').version"); \
		echo "Changes since $${OLD}" && \
		git log --oneline --graph v$${OLD}..HEAD && \
		echo
	@read -r -p "Version? (major, minor, patch): " VERSION; \
		npm version $$VERSION
	git push origin HEAD $$(git describe HEAD)
.PHONY: release

#
# stop and remove any containers networks, images, or volumes created
# by this build
#
clean-containers:
	docker-compose down --volumes
.PHONY: clean-containers

#
# quick cleanup; leaves things that are expensive to remove or rebuild
#
clean: clean-containers
	rm -rf build/
	rm -f version.txt
.PHONY: clean

#
# clean up even the stuff that's expensive to build
#
really-clean: clean clean-images
.PHONY: really-clean

#
# remove any images generated by this build
#
clean-images:
	docker images -f 'label=dcs.name=$(IMAGE_NAME)' \
				  --format="{{.Repository}} {{.Tag}} {{.ID}}" | \
		awk '{ \
			if ($$2=="<none>") { \
				print $$3 \
			} else { \
				print $$1 ":" $$2 \
			} \
		}' | \
		xargs docker rmi
.PHONY: clean-images

#
# ci build process
#
ci: pull build ci-test tag push
	@echo $(GIT_TAG_NAME) > version.txt
.PHONY: ci

#
# ci cleanup process. Stops and removes containers, but leaves images (for
# quicker rebuilds) and artifacts (version file, test results, etc.)
#
ci-clean: clean-containers
.PHONY: ci-clean

#
#  show the current version and branch name, for quick reference.
#
version:
	@echo Version: $(GIT_TAG_NAME)
	@echo Branch: $(GIT_BRANCH_NAME)
.PHONY: version
